package utils.mutualinformation.misticmod;

import java.io.IOException;
import java.io.PrintStream;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import utils.mutualinformation.misticmod.datastructures.MI_Position;
import cmdGA.Parser;
import cmdGA.SingleOption;
import cmdGA.exceptions.IncorrectParameterTypeException;
import cmdGA.parameterType.DoubleParameter;
import cmdGA.parameterType.InputStreamParameter;
import cmdGA.parameterType.PrintStreamParameter;



/**
 * Given a MI_data file, generated by MISTIC, keeps top n% MI values, and replaces the rest of values by -999.
 * To direct Cytoscape and circos to do not taken them into account.   
 * 
 * 
 * @author javier
 *
 */
public class KeepTopMIData  extends FilterMIData {

	double topPercentOpt;

public static void main(String[] args ) throws IOException{
	
	Parser parser = new Parser();
	
	SingleOption inOpt = new SingleOption(parser, System.in, "-infile", InputStreamParameter.getParameter());
	
	SingleOption outopt = new SingleOption(parser, System.out, "-outfile", PrintStreamParameter.getParameter());
	
	SingleOption topPercentOpt = new SingleOption(parser, null, "-toppercent", DoubleParameter.getParameter());
	
	try {
		
		parser.parseEx(args);
		
	} catch (IncorrectParameterTypeException e) {
		
		e.printStackTrace();
		
	}
	
	KeepTopMIData ktm = new KeepTopMIData();
	
	FilterMIData.filter = ktm;
	
	filter.inOpt = inOpt;
	
	filter.outopt = outopt;
	
	if (topPercentOpt.isPresent()) { 
	
		ktm.topPercentOpt = ((Double) topPercentOpt.getValue());
	
		ktm.main();
		
		
	} else {
		
		System.err.println("-toppercent option is mandatory.");
		
	}
	
	
}
	
public void filter(PrintStream out, List<Double> values, List<MI_Position> MI_Data_Lines) {
		
		Comparator<Double> comparator = new Comparator<Double>() {
	
			@Override
			public int compare(Double val1, Double val2) {
				
				return (int) ((val2-val1)/ Math.abs(val2-val1));
				
			}
			
		};
		
//		Collections.sort(values);
		
		Collections.sort(values, comparator);
		
		int top_n = (int) (topPercentOpt * values.size()/100);
		
		double top_cutoff = values.get(top_n);
		
		for (MI_Position pos : MI_Data_Lines) {
			
			if (pos.getMi()<top_cutoff) {
	
				pos.setMi(-999.99d);
				
			}
			
			out.println(pos);
		}
		
	}

}
