package utils.mutualinformation.misticmod;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import cmdGA.MultipleOption;
import cmdGA.Parser;
import cmdGA.SingleOption;
import cmdGA.exceptions.IncorrectParameterTypeException;
import cmdGA.parameterType.InputStreamParameter;
import cmdGA.parameterType.IntegerParameter;
import cmdGA.parameterType.PrintStreamParameter;

public class InterProteinCumulativeMIMatrix {

	List<MI_PositionWithProtein> data;
	
	/**
	 * @param args
	 * @throws IncorrectParameterTypeException 
	 */
	public static void main(String[] args) throws IncorrectParameterTypeException {

		Parser parser = new Parser();
		
		SingleOption inOpt = new SingleOption(parser, System.in, "-infile", InputStreamParameter.getParameter());
		
		SingleOption outOpt = new SingleOption(parser, System.out,"-outfile", PrintStreamParameter.getParameter());
		
		MultipleOption lengthsOpt = new MultipleOption(parser, null, "-lengths", ',', IntegerParameter.getParameter());
		
		parser.parseEx(args);

		InterProteinCumulativeMIMatrix ipcm = new InterProteinCumulativeMIMatrix();

		Integer[] lengths = getLengths(lengthsOpt);
		
		ipcm.readMiData((InputStream) inOpt.getValue());
		
		ipcm.assignProteinNumber(lengths);
		
		Double[][] cmi_inter = ipcm.calculateCMIInter(lengths.length, lengths);
		
		PrintStream out = (PrintStream)outOpt.getValue();
		
		export(out,cmi_inter);

		out.flush();
		
		out.close();
		
	}
	
	
	
	/***
	 * export CMI interportein data.
	 * Prints one line for protein-protein CMI.
	 * And shows the protein number for each protein and CMI, separated by a tab.
	 * 
	 * @param out
	 * @param cmi_inter
	 */
	private static void export(PrintStream out, Double[][] cmi_inter) {
		
		for (int i = 0 ; i<cmi_inter.length-1;i++) {
			
			for (int j=i+1; j<cmi_inter.length; j++) {
				
				out.println((i+1) +"\t" + (j+1) + "\t" + cmi_inter[i][j]);
				
			}
			
		}
		
	}



	private Double[][] calculateCMIInter(int length, Integer[] lengths) {
		
		Double[][] results = new Double[length][length];
		
		for (int i =0 ; i< length ;i ++) {
			
			for (int j=0; j<length ;j++) {
				
				results[i][j] = 0d;
				
			}
			
		}

		for (MI_PositionWithProtein pos : this.data) {
			
			double cv = pos.mi>0?pos.mi:0;
			
			results[pos.prot1][pos.prot2] = results[pos.prot1][pos.prot2] + cv ;
			
			results[pos.prot2][pos.prot1]= results[pos.prot2][pos.prot1]+cv;
			
		}
		
		for(int i=0;i<length;i++) {
			
			for(int j=0; j<length ; j++) {

				results[i][j] = results[i][j] / (lengths[i] * lengths[j]); 
				
			}
			
		}
		
		return results;
		
	}


	/**
	 * Sets the protein data that correspond for each protein
	 * 
	 * @param lengths
	 */
	private void assignProteinNumber(Integer[] lengths) {
		
		for (MI_PositionWithProtein pos : this.data) {
			
			pos.setProt1(this.getProteinNumberFromPos(pos.pos1,lengths));
			
			pos.setProt2(this.getProteinNumberFromPos(pos.pos2,lengths));
			
		}
		
	}

	/**
	 * Get the protein value from the position
	 * 
	 * @param pos2
	 * @param lengths
	 * @return
	 */
	private int getProteinNumberFromPos(int pos2, Integer[] lengths) {
		
		for (int i = 0; i<lengths.length;i++) {
			
			pos2 = pos2 - lengths[i];
			
			if (pos2<0) return i;
			
		}
		
		return 0;
		
	}



	/**
	 * transforms lengths option from command line to a Integer array 
	 * 
	 * @param lengthsOpt
	 * @return
	 */
	private static Integer[] getLengths(MultipleOption lengthsOpt) {

		Integer[] result = new Integer[lengthsOpt.count()];
		
		for (int i = 0; i<lengthsOpt.count(); i++) {
			
			result[i] = (Integer) lengthsOpt.getValue(i);
			
		}
		
		return result;
	}



	/**
	 * Reads strings for MI data generated by MISTIC from the InputStream
	 * and returns a list of objects representing the data  
	 * 
	 * @param in
	 */
	private void readMiData(InputStream in) {
		
		String currentLine = null;
		
		BufferedReader inb = new BufferedReader(new InputStreamReader(in));
		
		this.data = new ArrayList<MI_PositionWithProtein>();
		
		try {
			while((currentLine = inb.readLine())!=null) {
			
				String[] data = currentLine.split("\t");
				
				this.data.add(new MI_PositionWithProtein(Integer.valueOf(data[0]), Integer.valueOf(data[2]), data[1], data[3], Double.valueOf(data[4])));
				
			}
		} catch (IOException e) {

			e.printStackTrace();
			
		}
		
		
	}

}
