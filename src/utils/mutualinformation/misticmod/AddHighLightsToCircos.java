package utils.mutualinformation.misticmod;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.lang.reflect.Array;

import cmdGA.MultipleOption;
import cmdGA.Parser;
import cmdGA.SingleOption;
import cmdGA.exceptions.IncorrectParameterTypeException;
import cmdGA.parameterType.InputStreamParameter;
import cmdGA.parameterType.IntegerParameter;
import cmdGA.parameterType.PrintStreamParameter;
import cmdGA.parameterType.StringParameter;

/**
 * Reads a .circos configuration files generated by MISTIC.
 * Changes the color of each chromosome (amino acid position, really) according to the protein it belongs.
 *   
 * 
 * @author javier
 *
 */
public class AddHighLightsToCircos {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {

		Parser parser = new Parser();
		
		SingleOption inOpt = new SingleOption(parser, System.in, "-infile", InputStreamParameter.getParameter());
		
		SingleOption outopt = new SingleOption(parser, System.out, "-outfile", PrintStreamParameter.getParameter());
		
		MultipleOption lengthsOpt = new MultipleOption(parser, null, "-lengths",',' ,IntegerParameter.getParameter());
		
		MultipleOption colorsOpt = new MultipleOption(parser, null, "-colors", ',', StringParameter.getParameter());
		
		String[] colors;
		
		Integer[] lengths;

		
		try {
			
			parser.parseEx(args);
			
		} catch (IncorrectParameterTypeException e) {
			
			e.printStackTrace();
			
		}
	
		PrintStream out = (PrintStream) outopt.getValue();

		BufferedReader in = new BufferedReader(new InputStreamReader((InputStream)inOpt.getValue()));
		
		
		colors = getColors(colorsOpt);
		
		lengths = getLengths(lengthsOpt);

		AddHighLightsToCircos ahtc = new AddHighLightsToCircos();
		
		lengths = ahtc.modifiy_lengths(lengths);
		
		String currentLine = null;
		
		while((currentLine = in.readLine())!=null) {
			
			String[] elements = ahtc.parseCircosLine(currentLine);
			
			int position = Integer.valueOf(elements[0]);
			
			int range = ahtc.getRangeNumber(position, lengths);
			
			elements[4] = colors[range % colors.length];
			
			out.println(ahtc.makeCircosLine(elements));
			
		}
		
		out.flush();
		
		out.close();
		
		
		
	}
	
	/**
	 * Creates a circos karyotype configuration file line, given a set of elements.
 	 * If the array given is {"13", "13P", "0" ,"100", "chr0"}
 	 * The circos karyotype line will be: "chr - 13 13P 0 100 chr0"
	 * 
	 * 
	 * @param elements
	 * @return
	 */
	public String makeCircosLine(String[] elements) {
		
		StringBuilder result = new StringBuilder();
		
		result.append("chr -");
		
		for (String string : elements) {
			
			result.append(" ");
			
			result.append(string);
			
		}
		
		return result.toString();   
		
	}
	
	/**
	 * Parse a line of the circos karyotype file and returns an array of string.
	 * The circos karyotype lines are this form: "chr - 13 13P 0 100 chr0"
	 * The array returned is {"13", "13P", "0" ,"100", "chr0"}
	 * 
	 * @param line
	 * @return
	 */
	public String[] parseCircosLine(String line) {
		
		String[] data = line.split(" +");
		String[] newdata = new String[data.length-2];
		
		for (int i = 2; i<data.length; i++) {
			
			newdata[i-2] = data[i];
			
		}
		
		
		return newdata;
	}
	
	
	/**
	 * Given a position in a list of ranges, and an array with the last positions of each range, 
	 * this method retrieves the number order of the range that position belongs 
	 * 
	 * @param position
	 * @param lengths
	 * @return
	 */
	public int getRangeNumber(int position, Integer[] lengths) {
		
		for (int i=0; i<lengths.length; i++) {
			
			if (position - lengths[i]<=0) return i;
			
		}
		
		return 0;
	}

	/**
	 * Given a position in a list of ranges, and an array with the lengths of each range, 
	 * this method modify this array and sets in each position of the array the last position of each range, 
	 * 
	 * @param lengths
	 * @return
	 */
	public Integer[] modifiy_lengths(Integer[] lengths) {
		
		for (int i=0; i< lengths.length-1;i++) {
			
				lengths[i+1] = lengths[i+1] + lengths[i];
			
		}
		
		return lengths;
		
	}

	private static Integer[] getLengths(MultipleOption lengthsOpt) {

		return getValues(lengthsOpt, new Integer[]{0}, Integer.class);
		
	}

	public static String[] getColors(MultipleOption colorsOpt) { 
	
		return getValues(colorsOpt, new String[]{"black", "red"}, String.class);
		
	}
	
	@SuppressWarnings("unchecked")
	public static <T> T[] getValues(MultipleOption colorsOpt, T[] defaultValue, Class<T> type ) { 
		
		T[] values ;//= Array.newInstance(type, 4);
		
		if (colorsOpt.getValues()!=null && colorsOpt.getValues()[0]!= null) {
			
			int count = colorsOpt.count();
			
			values = (T[]) Array.newInstance(type, count);
			
			for(int i = 0; i< count;i++) {
				
				((Object[])values)[i] = type.cast(colorsOpt.getValue(i));
				
			}
			
		} else {
			
			values = defaultValue; //new String[]{"black", "red"};
			
		}
		return values;
	}

}
